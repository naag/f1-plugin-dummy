// Code generated by go-swagger; DO NOT EDIT.

package addressbook

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.GetAddressbookPartiesIDProductsProductIDEventsEventID creates a new GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest object
// with the default values initialized.
func (c *Client) GetAddressbookPartiesIDProductsProductIDEventsEventID() *GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest {
	var ()
	return &GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest{

		EventID: c.Defaults.GetStrfmtUUID("GetAddressbookPartiesIDProductsProductIDEventsEventID", "event_id"),

		ID: c.Defaults.GetStrfmtUUID("GetAddressbookPartiesIDProductsProductIDEventsEventID", "id"),

		ProductID: c.Defaults.GetStrfmtUUID("GetAddressbookPartiesIDProductsProductIDEventsEventID", "product_id"),

		Version: c.Defaults.GetInt64Ptr("GetAddressbookPartiesIDProductsProductIDEventsEventID", "version"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest struct {

	/*EventID      Id of party product event      */

	EventID strfmt.UUID

	/*ID      Id of party      */

	ID strfmt.UUID

	/*ProductID      Id of party product      */

	ProductID strfmt.UUID

	/*Version*/

	Version *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest) FromJson(j string) *GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest {

	return o
}

func (o *GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest) WithEventID(eventID strfmt.UUID) *GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest {

	o.EventID = eventID

	return o
}

func (o *GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest) WithID(id strfmt.UUID) *GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest {

	o.ID = id

	return o
}

func (o *GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest) WithProductID(productID strfmt.UUID) *GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest {

	o.ProductID = productID

	return o
}

func (o *GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest) WithVersion(version int64) *GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest {

	o.Version = &version

	return o
}

func (o *GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest) WithoutVersion() *GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest {

	o.Version = nil

	return o
}

//////////////////
// WithContext adds the context to the get addressbook parties ID products product ID events event ID Request
func (o *GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest) WithContext(ctx context.Context) *GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the get addressbook parties ID products product ID events event ID Request
func (o *GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest) WithHTTPClient(client *http.Client) *GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *GetAddressbookPartiesIDProductsProductIDEventsEventIDRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param event_id
	if err := r.SetPathParam("event_id", o.EventID.String()); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	// path param product_id
	if err := r.SetPathParam("product_id", o.ProductID.String()); err != nil {
		return err
	}

	if o.Version != nil {

		// query param version
		var qrVersion int64
		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := swag.FormatInt64(qrVersion)
		if qVersion != "" {
			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
