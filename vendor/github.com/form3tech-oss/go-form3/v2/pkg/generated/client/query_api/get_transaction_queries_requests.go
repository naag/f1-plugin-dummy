// Code generated by go-swagger; DO NOT EDIT.

package query_api

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.GetTransactionQueries creates a new GetTransactionQueriesRequest object
// with the default values initialized.
func (c *Client) GetTransactionQueries() *GetTransactionQueriesRequest {
	var ()
	return &GetTransactionQueriesRequest{

		FilterAutoHandled: c.Defaults.GetBoolPtr("GetTransactionQueries", "filter[auto_handled]"),

		FilterCreatedOnFrom: c.Defaults.GetStrfmtDateTimePtr("GetTransactionQueries", "filter[created_on_from]"),

		FilterCreatedOnTo: c.Defaults.GetStrfmtDateTimePtr("GetTransactionQueries", "filter[created_on_to]"),

		FilterOrganisationID: make([]strfmt.UUID, 0),

		FilterPaymentID: c.Defaults.GetStrfmtUUIDPtr("GetTransactionQueries", "filter[payment.id]"),

		FilterPaymentAdmissionID: c.Defaults.GetStrfmtUUIDPtr("GetTransactionQueries", "filter[payment_admission.id]"),

		FilterProcessingDateFrom: c.Defaults.GetStrfmtDatePtr("GetTransactionQueries", "filter[processing_date_from]"),

		FilterProcessingDateTo: c.Defaults.GetStrfmtDatePtr("GetTransactionQueries", "filter[processing_date_to]"),

		FilterQueryType: c.Defaults.GetStringPtr("GetTransactionQueries", "filter[query_type]"),

		FilterStatus: c.Defaults.GetStringPtr("GetTransactionQueries", "filter[status]"),

		PageNumber: c.Defaults.GetStringPtr("GetTransactionQueries", "page[number]"),

		PageSize: c.Defaults.GetInt64Ptr("GetTransactionQueries", "page[size]"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type GetTransactionQueriesRequest struct {

	/*FilterAutoHandled      Find all queries for given auto handled flag      */

	FilterAutoHandled *bool

	/*FilterCreatedOnFrom      Find all queries from a certain created date.      */

	FilterCreatedOnFrom *strfmt.DateTime

	/*FilterCreatedOnTo      Find all queries up to a certain created date.      */

	FilterCreatedOnTo *strfmt.DateTime

	/*FilterOrganisationID      The organisations to filter on      */

	FilterOrganisationID []strfmt.UUID

	/*FilterPaymentID      Find all queries with a certain payment id.      */

	FilterPaymentID *strfmt.UUID

	/*FilterPaymentAdmissionID      Find all queries with a certain payment admission id.      */

	FilterPaymentAdmissionID *strfmt.UUID

	/*FilterProcessingDateFrom      Find all queries from a certain value date.      */

	FilterProcessingDateFrom *strfmt.Date

	/*FilterProcessingDateTo      Find all queries up to a certain value date.      */

	FilterProcessingDateTo *strfmt.Date

	/*FilterQueryType      Find all queries for a given query type      */

	FilterQueryType *string

	/*FilterStatus      Find all queries for a given status      */

	FilterStatus *string

	/*PageNumber      Which page to select      */

	PageNumber *string

	/*PageSize      Number of items to select      */

	PageSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *GetTransactionQueriesRequest) FromJson(j string) *GetTransactionQueriesRequest {

	return o
}

func (o *GetTransactionQueriesRequest) WithFilterAutoHandled(filterAutoHandled bool) *GetTransactionQueriesRequest {

	o.FilterAutoHandled = &filterAutoHandled

	return o
}

func (o *GetTransactionQueriesRequest) WithoutFilterAutoHandled() *GetTransactionQueriesRequest {

	o.FilterAutoHandled = nil

	return o
}

func (o *GetTransactionQueriesRequest) WithFilterCreatedOnFrom(filterCreatedOnFrom strfmt.DateTime) *GetTransactionQueriesRequest {

	o.FilterCreatedOnFrom = &filterCreatedOnFrom

	return o
}

func (o *GetTransactionQueriesRequest) WithoutFilterCreatedOnFrom() *GetTransactionQueriesRequest {

	o.FilterCreatedOnFrom = nil

	return o
}

func (o *GetTransactionQueriesRequest) WithFilterCreatedOnTo(filterCreatedOnTo strfmt.DateTime) *GetTransactionQueriesRequest {

	o.FilterCreatedOnTo = &filterCreatedOnTo

	return o
}

func (o *GetTransactionQueriesRequest) WithoutFilterCreatedOnTo() *GetTransactionQueriesRequest {

	o.FilterCreatedOnTo = nil

	return o
}

func (o *GetTransactionQueriesRequest) WithFilterOrganisationID(filterOrganisationID []strfmt.UUID) *GetTransactionQueriesRequest {

	o.FilterOrganisationID = filterOrganisationID

	return o
}

func (o *GetTransactionQueriesRequest) WithoutFilterOrganisationID() *GetTransactionQueriesRequest {

	o.FilterOrganisationID = nil

	return o
}

func (o *GetTransactionQueriesRequest) WithFilterPaymentID(filterPaymentID strfmt.UUID) *GetTransactionQueriesRequest {

	o.FilterPaymentID = &filterPaymentID

	return o
}

func (o *GetTransactionQueriesRequest) WithoutFilterPaymentID() *GetTransactionQueriesRequest {

	o.FilterPaymentID = nil

	return o
}

func (o *GetTransactionQueriesRequest) WithFilterPaymentAdmissionID(filterPaymentAdmissionID strfmt.UUID) *GetTransactionQueriesRequest {

	o.FilterPaymentAdmissionID = &filterPaymentAdmissionID

	return o
}

func (o *GetTransactionQueriesRequest) WithoutFilterPaymentAdmissionID() *GetTransactionQueriesRequest {

	o.FilterPaymentAdmissionID = nil

	return o
}

func (o *GetTransactionQueriesRequest) WithFilterProcessingDateFrom(filterProcessingDateFrom strfmt.Date) *GetTransactionQueriesRequest {

	o.FilterProcessingDateFrom = &filterProcessingDateFrom

	return o
}

func (o *GetTransactionQueriesRequest) WithoutFilterProcessingDateFrom() *GetTransactionQueriesRequest {

	o.FilterProcessingDateFrom = nil

	return o
}

func (o *GetTransactionQueriesRequest) WithFilterProcessingDateTo(filterProcessingDateTo strfmt.Date) *GetTransactionQueriesRequest {

	o.FilterProcessingDateTo = &filterProcessingDateTo

	return o
}

func (o *GetTransactionQueriesRequest) WithoutFilterProcessingDateTo() *GetTransactionQueriesRequest {

	o.FilterProcessingDateTo = nil

	return o
}

func (o *GetTransactionQueriesRequest) WithFilterQueryType(filterQueryType string) *GetTransactionQueriesRequest {

	o.FilterQueryType = &filterQueryType

	return o
}

func (o *GetTransactionQueriesRequest) WithoutFilterQueryType() *GetTransactionQueriesRequest {

	o.FilterQueryType = nil

	return o
}

func (o *GetTransactionQueriesRequest) WithFilterStatus(filterStatus string) *GetTransactionQueriesRequest {

	o.FilterStatus = &filterStatus

	return o
}

func (o *GetTransactionQueriesRequest) WithoutFilterStatus() *GetTransactionQueriesRequest {

	o.FilterStatus = nil

	return o
}

func (o *GetTransactionQueriesRequest) WithPageNumber(pageNumber string) *GetTransactionQueriesRequest {

	o.PageNumber = &pageNumber

	return o
}

func (o *GetTransactionQueriesRequest) WithoutPageNumber() *GetTransactionQueriesRequest {

	o.PageNumber = nil

	return o
}

func (o *GetTransactionQueriesRequest) WithPageSize(pageSize int64) *GetTransactionQueriesRequest {

	o.PageSize = &pageSize

	return o
}

func (o *GetTransactionQueriesRequest) WithoutPageSize() *GetTransactionQueriesRequest {

	o.PageSize = nil

	return o
}

//////////////////
// WithContext adds the context to the get transaction queries Request
func (o *GetTransactionQueriesRequest) WithContext(ctx context.Context) *GetTransactionQueriesRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the get transaction queries Request
func (o *GetTransactionQueriesRequest) WithHTTPClient(client *http.Client) *GetTransactionQueriesRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *GetTransactionQueriesRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterAutoHandled != nil {

		// query param filter[auto_handled]
		var qrFilterAutoHandled bool
		if o.FilterAutoHandled != nil {
			qrFilterAutoHandled = *o.FilterAutoHandled
		}
		qFilterAutoHandled := swag.FormatBool(qrFilterAutoHandled)
		if qFilterAutoHandled != "" {
			if err := r.SetQueryParam("filter[auto_handled]", qFilterAutoHandled); err != nil {
				return err
			}
		}

	}

	if o.FilterCreatedOnFrom != nil {

		// query param filter[created_on_from]
		var qrFilterCreatedOnFrom strfmt.DateTime
		if o.FilterCreatedOnFrom != nil {
			qrFilterCreatedOnFrom = *o.FilterCreatedOnFrom
		}
		qFilterCreatedOnFrom := qrFilterCreatedOnFrom.String()
		if qFilterCreatedOnFrom != "" {
			if err := r.SetQueryParam("filter[created_on_from]", qFilterCreatedOnFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterCreatedOnTo != nil {

		// query param filter[created_on_to]
		var qrFilterCreatedOnTo strfmt.DateTime
		if o.FilterCreatedOnTo != nil {
			qrFilterCreatedOnTo = *o.FilterCreatedOnTo
		}
		qFilterCreatedOnTo := qrFilterCreatedOnTo.String()
		if qFilterCreatedOnTo != "" {
			if err := r.SetQueryParam("filter[created_on_to]", qFilterCreatedOnTo); err != nil {
				return err
			}
		}

	}

	var valuesFilterOrganisationID []string
	for _, v := range o.FilterOrganisationID {
		valuesFilterOrganisationID = append(valuesFilterOrganisationID, v.String())
	}

	joinedFilterOrganisationID := swag.JoinByFormat(valuesFilterOrganisationID, "")
	// query array param filter[organisation_id]
	if err := r.SetQueryParam("filter[organisation_id]", joinedFilterOrganisationID...); err != nil {
		return err
	}

	if o.FilterPaymentID != nil {

		// query param filter[payment.id]
		var qrFilterPaymentID strfmt.UUID
		if o.FilterPaymentID != nil {
			qrFilterPaymentID = *o.FilterPaymentID
		}
		qFilterPaymentID := qrFilterPaymentID.String()
		if qFilterPaymentID != "" {
			if err := r.SetQueryParam("filter[payment.id]", qFilterPaymentID); err != nil {
				return err
			}
		}

	}

	if o.FilterPaymentAdmissionID != nil {

		// query param filter[payment_admission.id]
		var qrFilterPaymentAdmissionID strfmt.UUID
		if o.FilterPaymentAdmissionID != nil {
			qrFilterPaymentAdmissionID = *o.FilterPaymentAdmissionID
		}
		qFilterPaymentAdmissionID := qrFilterPaymentAdmissionID.String()
		if qFilterPaymentAdmissionID != "" {
			if err := r.SetQueryParam("filter[payment_admission.id]", qFilterPaymentAdmissionID); err != nil {
				return err
			}
		}

	}

	if o.FilterProcessingDateFrom != nil {

		// query param filter[processing_date_from]
		var qrFilterProcessingDateFrom strfmt.Date
		if o.FilterProcessingDateFrom != nil {
			qrFilterProcessingDateFrom = *o.FilterProcessingDateFrom
		}
		qFilterProcessingDateFrom := qrFilterProcessingDateFrom.String()
		if qFilterProcessingDateFrom != "" {
			if err := r.SetQueryParam("filter[processing_date_from]", qFilterProcessingDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterProcessingDateTo != nil {

		// query param filter[processing_date_to]
		var qrFilterProcessingDateTo strfmt.Date
		if o.FilterProcessingDateTo != nil {
			qrFilterProcessingDateTo = *o.FilterProcessingDateTo
		}
		qFilterProcessingDateTo := qrFilterProcessingDateTo.String()
		if qFilterProcessingDateTo != "" {
			if err := r.SetQueryParam("filter[processing_date_to]", qFilterProcessingDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterQueryType != nil {

		// query param filter[query_type]
		var qrFilterQueryType string
		if o.FilterQueryType != nil {
			qrFilterQueryType = *o.FilterQueryType
		}
		qFilterQueryType := qrFilterQueryType
		if qFilterQueryType != "" {
			if err := r.SetQueryParam("filter[query_type]", qFilterQueryType); err != nil {
				return err
			}
		}

	}

	if o.FilterStatus != nil {

		// query param filter[status]
		var qrFilterStatus string
		if o.FilterStatus != nil {
			qrFilterStatus = *o.FilterStatus
		}
		qFilterStatus := qrFilterStatus
		if qFilterStatus != "" {
			if err := r.SetQueryParam("filter[status]", qFilterStatus); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param page[number]
		var qrPageNumber string
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := qrPageNumber
		if qPageNumber != "" {
			if err := r.SetQueryParam("page[number]", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page[size]
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page[size]", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
