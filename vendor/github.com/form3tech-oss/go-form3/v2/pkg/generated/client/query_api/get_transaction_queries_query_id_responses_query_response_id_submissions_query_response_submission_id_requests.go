// Code generated by go-swagger; DO NOT EDIT.

package query_api

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionID creates a new GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionIDRequest object
// with the default values initialized.
func (c *Client) GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionID() *GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionIDRequest {
	var ()
	return &GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionIDRequest{

		QueryID: c.Defaults.GetStrfmtUUID("GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionID", "query_id"),

		QueryResponseID: c.Defaults.GetStrfmtUUID("GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionID", "query_response_id"),

		QueryResponseSubmissionID: c.Defaults.GetStrfmtUUID("GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionID", "query_response_submission_id"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionIDRequest struct {

	/*QueryID      Query ID      */

	QueryID strfmt.UUID

	/*QueryResponseID      Query Response ID      */

	QueryResponseID strfmt.UUID

	/*QueryResponseSubmissionID      Query Response Submission ID      */

	QueryResponseSubmissionID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionIDRequest) FromJson(j string) *GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionIDRequest {

	return o
}

func (o *GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionIDRequest) WithQueryID(queryID strfmt.UUID) *GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionIDRequest {

	o.QueryID = queryID

	return o
}

func (o *GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionIDRequest) WithQueryResponseID(queryResponseID strfmt.UUID) *GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionIDRequest {

	o.QueryResponseID = queryResponseID

	return o
}

func (o *GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionIDRequest) WithQueryResponseSubmissionID(queryResponseSubmissionID strfmt.UUID) *GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionIDRequest {

	o.QueryResponseSubmissionID = queryResponseSubmissionID

	return o
}

//////////////////
// WithContext adds the context to the get transaction queries query ID responses query response ID submissions query response submission ID Request
func (o *GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionIDRequest) WithContext(ctx context.Context) *GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionIDRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the get transaction queries query ID responses query response ID submissions query response submission ID Request
func (o *GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionIDRequest) WithHTTPClient(client *http.Client) *GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionIDRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *GetTransactionQueriesQueryIDResponsesQueryResponseIDSubmissionsQueryResponseSubmissionIDRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param query_id
	if err := r.SetPathParam("query_id", o.QueryID.String()); err != nil {
		return err
	}

	// path param query_response_id
	if err := r.SetPathParam("query_response_id", o.QueryResponseID.String()); err != nil {
		return err
	}

	// path param query_response_submission_id
	if err := r.SetPathParam("query_response_submission_id", o.QueryResponseSubmissionID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
