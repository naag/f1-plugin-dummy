// Code generated by go-swagger; DO NOT EDIT.

package addressbook

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.GetAddressbookParties creates a new GetAddressbookPartiesRequest object
// with the default values initialized.
func (c *Client) GetAddressbookParties() *GetAddressbookPartiesRequest {
	var (
		pageSizeDefault = int64(100)
	)
	return &GetAddressbookPartiesRequest{

		FilterCustomerID: c.Defaults.GetStringPtr("GetAddressbookParties", "filter[customer_id]"),

		FilterPartyProductProduct: c.Defaults.GetStringPtr("GetAddressbookParties", "filter[party_product.product]"),

		FilterPartyProductProvider: c.Defaults.GetStringPtr("GetAddressbookParties", "filter[party_product.provider]"),

		FilterPartyProductStatus: c.Defaults.GetStringPtr("GetAddressbookParties", "filter[party_product.status]"),

		PageNumber: c.Defaults.GetStringPtr("GetAddressbookParties", "page[number]"),

		PageSize: &pageSizeDefault,

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type GetAddressbookPartiesRequest struct {

	/*FilterCustomerID      Filter parties by customer_id value      */

	FilterCustomerID *string

	/*FilterPartyProductProduct      Filter parties by related party products' product      */

	FilterPartyProductProduct *string

	/*FilterPartyProductProvider      Filter parties by related party products' provider      */

	FilterPartyProductProvider *string

	/*FilterPartyProductStatus      Filter parties by related party products' status      */

	FilterPartyProductStatus *string

	/*PageNumber      Which page to select      */

	PageNumber *string

	/*PageSize      Number of items to select      */

	PageSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *GetAddressbookPartiesRequest) FromJson(j string) *GetAddressbookPartiesRequest {

	return o
}

func (o *GetAddressbookPartiesRequest) WithFilterCustomerID(filterCustomerID string) *GetAddressbookPartiesRequest {

	o.FilterCustomerID = &filterCustomerID

	return o
}

func (o *GetAddressbookPartiesRequest) WithoutFilterCustomerID() *GetAddressbookPartiesRequest {

	o.FilterCustomerID = nil

	return o
}

func (o *GetAddressbookPartiesRequest) WithFilterPartyProductProduct(filterPartyProductProduct string) *GetAddressbookPartiesRequest {

	o.FilterPartyProductProduct = &filterPartyProductProduct

	return o
}

func (o *GetAddressbookPartiesRequest) WithoutFilterPartyProductProduct() *GetAddressbookPartiesRequest {

	o.FilterPartyProductProduct = nil

	return o
}

func (o *GetAddressbookPartiesRequest) WithFilterPartyProductProvider(filterPartyProductProvider string) *GetAddressbookPartiesRequest {

	o.FilterPartyProductProvider = &filterPartyProductProvider

	return o
}

func (o *GetAddressbookPartiesRequest) WithoutFilterPartyProductProvider() *GetAddressbookPartiesRequest {

	o.FilterPartyProductProvider = nil

	return o
}

func (o *GetAddressbookPartiesRequest) WithFilterPartyProductStatus(filterPartyProductStatus string) *GetAddressbookPartiesRequest {

	o.FilterPartyProductStatus = &filterPartyProductStatus

	return o
}

func (o *GetAddressbookPartiesRequest) WithoutFilterPartyProductStatus() *GetAddressbookPartiesRequest {

	o.FilterPartyProductStatus = nil

	return o
}

func (o *GetAddressbookPartiesRequest) WithPageNumber(pageNumber string) *GetAddressbookPartiesRequest {

	o.PageNumber = &pageNumber

	return o
}

func (o *GetAddressbookPartiesRequest) WithoutPageNumber() *GetAddressbookPartiesRequest {

	o.PageNumber = nil

	return o
}

func (o *GetAddressbookPartiesRequest) WithPageSize(pageSize int64) *GetAddressbookPartiesRequest {

	o.PageSize = &pageSize

	return o
}

func (o *GetAddressbookPartiesRequest) WithoutPageSize() *GetAddressbookPartiesRequest {

	o.PageSize = nil

	return o
}

//////////////////
// WithContext adds the context to the get addressbook parties Request
func (o *GetAddressbookPartiesRequest) WithContext(ctx context.Context) *GetAddressbookPartiesRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the get addressbook parties Request
func (o *GetAddressbookPartiesRequest) WithHTTPClient(client *http.Client) *GetAddressbookPartiesRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *GetAddressbookPartiesRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterCustomerID != nil {

		// query param filter[customer_id]
		var qrFilterCustomerID string
		if o.FilterCustomerID != nil {
			qrFilterCustomerID = *o.FilterCustomerID
		}
		qFilterCustomerID := qrFilterCustomerID
		if qFilterCustomerID != "" {
			if err := r.SetQueryParam("filter[customer_id]", qFilterCustomerID); err != nil {
				return err
			}
		}

	}

	if o.FilterPartyProductProduct != nil {

		// query param filter[party_product.product]
		var qrFilterPartyProductProduct string
		if o.FilterPartyProductProduct != nil {
			qrFilterPartyProductProduct = *o.FilterPartyProductProduct
		}
		qFilterPartyProductProduct := qrFilterPartyProductProduct
		if qFilterPartyProductProduct != "" {
			if err := r.SetQueryParam("filter[party_product.product]", qFilterPartyProductProduct); err != nil {
				return err
			}
		}

	}

	if o.FilterPartyProductProvider != nil {

		// query param filter[party_product.provider]
		var qrFilterPartyProductProvider string
		if o.FilterPartyProductProvider != nil {
			qrFilterPartyProductProvider = *o.FilterPartyProductProvider
		}
		qFilterPartyProductProvider := qrFilterPartyProductProvider
		if qFilterPartyProductProvider != "" {
			if err := r.SetQueryParam("filter[party_product.provider]", qFilterPartyProductProvider); err != nil {
				return err
			}
		}

	}

	if o.FilterPartyProductStatus != nil {

		// query param filter[party_product.status]
		var qrFilterPartyProductStatus string
		if o.FilterPartyProductStatus != nil {
			qrFilterPartyProductStatus = *o.FilterPartyProductStatus
		}
		qFilterPartyProductStatus := qrFilterPartyProductStatus
		if qFilterPartyProductStatus != "" {
			if err := r.SetQueryParam("filter[party_product.status]", qFilterPartyProductStatus); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param page[number]
		var qrPageNumber string
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := qrPageNumber
		if qPageNumber != "" {
			if err := r.SetQueryParam("page[number]", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page[size]
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page[size]", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
