// Code generated by go-swagger; DO NOT EDIT.

package participants

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.GetOpenbankingParticipants creates a new GetOpenbankingParticipantsRequest object
// with the default values initialized.
func (c *Client) GetOpenbankingParticipants() *GetOpenbankingParticipantsRequest {
	var ()
	return &GetOpenbankingParticipantsRequest{

		FilterSortCode: c.Defaults.GetInt64("GetOpenbankingParticipants", "filter[sort_code]"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type GetOpenbankingParticipantsRequest struct {

	/*FilterSortCode      Sort code      */

	FilterSortCode int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *GetOpenbankingParticipantsRequest) FromJson(j string) *GetOpenbankingParticipantsRequest {

	return o
}

func (o *GetOpenbankingParticipantsRequest) WithFilterSortCode(filterSortCode int64) *GetOpenbankingParticipantsRequest {

	o.FilterSortCode = filterSortCode

	return o
}

//////////////////
// WithContext adds the context to the get openbanking participants Request
func (o *GetOpenbankingParticipantsRequest) WithContext(ctx context.Context) *GetOpenbankingParticipantsRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the get openbanking participants Request
func (o *GetOpenbankingParticipantsRequest) WithHTTPClient(client *http.Client) *GetOpenbankingParticipantsRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *GetOpenbankingParticipantsRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param filter[sort_code]
	qrFilterSortCode := o.FilterSortCode
	qFilterSortCode := swag.FormatInt64(qrFilterSortCode)
	if qFilterSortCode != "" {
		if err := r.SetQueryParam("filter[sort_code]", qFilterSortCode); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
