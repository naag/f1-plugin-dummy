// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v2/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PartyProductEventPartyRelationship party product event party relationship
// swagger:model PartyProductEventPartyRelationship
type PartyProductEventPartyRelationship struct {

	// data
	// Required: true
	Data []*PartyProductEventPartyRelationshipDataItems0 `json:"data"`
}

func PartyProductEventPartyRelationshipWithDefaults(defaults client.Defaults) *PartyProductEventPartyRelationship {
	return &PartyProductEventPartyRelationship{

		Data: make([]*PartyProductEventPartyRelationshipDataItems0, 0),
	}
}

func (m *PartyProductEventPartyRelationship) WithData(data []*PartyProductEventPartyRelationshipDataItems0) *PartyProductEventPartyRelationship {

	m.Data = data

	return m
}

// Validate validates this party product event party relationship
func (m *PartyProductEventPartyRelationship) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartyProductEventPartyRelationship) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PartyProductEventPartyRelationship) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartyProductEventPartyRelationship) UnmarshalBinary(b []byte) error {
	var res PartyProductEventPartyRelationship
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *PartyProductEventPartyRelationship) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// PartyProductEventPartyRelationshipDataItems0 party product event party relationship data items0
// swagger:model PartyProductEventPartyRelationshipDataItems0
type PartyProductEventPartyRelationshipDataItems0 struct {

	// id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// type
	// Required: true
	Type *string `json:"type"`
}

func PartyProductEventPartyRelationshipDataItems0WithDefaults(defaults client.Defaults) *PartyProductEventPartyRelationshipDataItems0 {
	return &PartyProductEventPartyRelationshipDataItems0{

		ID: defaults.GetStrfmtUUIDPtr("PartyProductEventPartyRelationshipDataItems0", "id"),

		Type: defaults.GetStringPtr("PartyProductEventPartyRelationshipDataItems0", "type"),
	}
}

func (m *PartyProductEventPartyRelationshipDataItems0) WithID(id strfmt.UUID) *PartyProductEventPartyRelationshipDataItems0 {

	m.ID = &id

	return m
}

func (m *PartyProductEventPartyRelationshipDataItems0) WithoutID() *PartyProductEventPartyRelationshipDataItems0 {
	m.ID = nil
	return m
}

func (m *PartyProductEventPartyRelationshipDataItems0) WithType(typeVar string) *PartyProductEventPartyRelationshipDataItems0 {

	m.Type = &typeVar

	return m
}

func (m *PartyProductEventPartyRelationshipDataItems0) WithoutType() *PartyProductEventPartyRelationshipDataItems0 {
	m.Type = nil
	return m
}

// Validate validates this party product event party relationship data items0
func (m *PartyProductEventPartyRelationshipDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartyProductEventPartyRelationshipDataItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PartyProductEventPartyRelationshipDataItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PartyProductEventPartyRelationshipDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartyProductEventPartyRelationshipDataItems0) UnmarshalBinary(b []byte) error {
	var res PartyProductEventPartyRelationshipDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *PartyProductEventPartyRelationshipDataItems0) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
