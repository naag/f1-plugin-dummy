// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v2/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// QueryRelationships query relationships
// swagger:model QueryRelationships
type QueryRelationships struct {

	// payment
	Payment *RelationshipsPayment `json:"payment,omitempty"`

	// payment admission
	PaymentAdmission *RelationshipsPaymentAdmission `json:"payment_admission,omitempty"`

	// query admission
	QueryAdmission *RelationshipsQueryAdmission `json:"query_admission,omitempty"`

	// query response
	QueryResponse *RelationshipsQueryResponse `json:"query_response,omitempty"`
}

func QueryRelationshipsWithDefaults(defaults client.Defaults) *QueryRelationships {
	return &QueryRelationships{

		Payment: RelationshipsPaymentWithDefaults(defaults),

		PaymentAdmission: RelationshipsPaymentAdmissionWithDefaults(defaults),

		QueryAdmission: RelationshipsQueryAdmissionWithDefaults(defaults),

		QueryResponse: RelationshipsQueryResponseWithDefaults(defaults),
	}
}

func (m *QueryRelationships) WithPayment(payment RelationshipsPayment) *QueryRelationships {

	m.Payment = &payment

	return m
}

func (m *QueryRelationships) WithoutPayment() *QueryRelationships {
	m.Payment = nil
	return m
}

func (m *QueryRelationships) WithPaymentAdmission(paymentAdmission RelationshipsPaymentAdmission) *QueryRelationships {

	m.PaymentAdmission = &paymentAdmission

	return m
}

func (m *QueryRelationships) WithoutPaymentAdmission() *QueryRelationships {
	m.PaymentAdmission = nil
	return m
}

func (m *QueryRelationships) WithQueryAdmission(queryAdmission RelationshipsQueryAdmission) *QueryRelationships {

	m.QueryAdmission = &queryAdmission

	return m
}

func (m *QueryRelationships) WithoutQueryAdmission() *QueryRelationships {
	m.QueryAdmission = nil
	return m
}

func (m *QueryRelationships) WithQueryResponse(queryResponse RelationshipsQueryResponse) *QueryRelationships {

	m.QueryResponse = &queryResponse

	return m
}

func (m *QueryRelationships) WithoutQueryResponse() *QueryRelationships {
	m.QueryResponse = nil
	return m
}

// Validate validates this query relationships
func (m *QueryRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentAdmission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryAdmission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryRelationships) validatePayment(formats strfmt.Registry) error {

	if swag.IsZero(m.Payment) { // not required
		return nil
	}

	if m.Payment != nil {
		if err := m.Payment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment")
			}
			return err
		}
	}

	return nil
}

func (m *QueryRelationships) validatePaymentAdmission(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentAdmission) { // not required
		return nil
	}

	if m.PaymentAdmission != nil {
		if err := m.PaymentAdmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment_admission")
			}
			return err
		}
	}

	return nil
}

func (m *QueryRelationships) validateQueryAdmission(formats strfmt.Registry) error {

	if swag.IsZero(m.QueryAdmission) { // not required
		return nil
	}

	if m.QueryAdmission != nil {
		if err := m.QueryAdmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query_admission")
			}
			return err
		}
	}

	return nil
}

func (m *QueryRelationships) validateQueryResponse(formats strfmt.Registry) error {

	if swag.IsZero(m.QueryResponse) { // not required
		return nil
	}

	if m.QueryResponse != nil {
		if err := m.QueryResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query_response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryRelationships) UnmarshalBinary(b []byte) error {
	var res QueryRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *QueryRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
