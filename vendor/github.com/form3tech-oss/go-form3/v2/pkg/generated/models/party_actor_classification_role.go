// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// PartyActorClassificationRole party actor classification role
// swagger:model PartyActorClassificationRole
type PartyActorClassificationRole string

const (

	// PartyActorClassificationRoleSignatory captures enum value "signatory"
	PartyActorClassificationRoleSignatory PartyActorClassificationRole = "signatory"

	// PartyActorClassificationRoleDirector captures enum value "director"
	PartyActorClassificationRoleDirector PartyActorClassificationRole = "director"

	// PartyActorClassificationRoleShareholder captures enum value "shareholder"
	PartyActorClassificationRoleShareholder PartyActorClassificationRole = "shareholder"

	// PartyActorClassificationRoleUbo captures enum value "ubo"
	PartyActorClassificationRoleUbo PartyActorClassificationRole = "ubo"

	// PartyActorClassificationRolePep captures enum value "pep"
	PartyActorClassificationRolePep PartyActorClassificationRole = "pep"
)

// for schema
var partyActorClassificationRoleEnum []interface{}

func init() {
	var res []PartyActorClassificationRole
	if err := json.Unmarshal([]byte(`["signatory","director","shareholder","ubo","pep"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		partyActorClassificationRoleEnum = append(partyActorClassificationRoleEnum, v)
	}
}

func (m PartyActorClassificationRole) validatePartyActorClassificationRoleEnum(path, location string, value PartyActorClassificationRole) error {
	if err := validate.Enum(path, location, value, partyActorClassificationRoleEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this party actor classification role
func (m PartyActorClassificationRole) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePartyActorClassificationRoleEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartyActorClassificationRole) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
