// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v2/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DebtorPartyAccount debtor party account
// swagger:model DebtorPartyAccount
type DebtorPartyAccount struct {

	// id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// type
	// Required: true
	// Enum: [contact_accounts]
	Type *string `json:"type"`
}

func DebtorPartyAccountWithDefaults(defaults client.Defaults) *DebtorPartyAccount {
	return &DebtorPartyAccount{

		ID: defaults.GetStrfmtUUIDPtr("DebtorPartyAccount", "id"),

		Type: defaults.GetStringPtr("DebtorPartyAccount", "type"),
	}
}

func (m *DebtorPartyAccount) WithID(id strfmt.UUID) *DebtorPartyAccount {

	m.ID = &id

	return m
}

func (m *DebtorPartyAccount) WithoutID() *DebtorPartyAccount {
	m.ID = nil
	return m
}

func (m *DebtorPartyAccount) WithType(typeVar string) *DebtorPartyAccount {

	m.Type = &typeVar

	return m
}

func (m *DebtorPartyAccount) WithoutType() *DebtorPartyAccount {
	m.Type = nil
	return m
}

// Validate validates this debtor party account
func (m *DebtorPartyAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DebtorPartyAccount) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var debtorPartyAccountTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["contact_accounts"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		debtorPartyAccountTypeTypePropEnum = append(debtorPartyAccountTypeTypePropEnum, v)
	}
}

const (

	// DebtorPartyAccountTypeContactAccounts captures enum value "contact_accounts"
	DebtorPartyAccountTypeContactAccounts string = "contact_accounts"
)

// prop value enum
func (m *DebtorPartyAccount) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, debtorPartyAccountTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DebtorPartyAccount) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DebtorPartyAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DebtorPartyAccount) UnmarshalBinary(b []byte) error {
	var res DebtorPartyAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *DebtorPartyAccount) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
