// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v2/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PartyActorAttributes party actor attributes
// swagger:model PartyActorAttributes
type PartyActorAttributes struct {

	// address
	Address []string `json:"address"`

	// city
	City string `json:"city,omitempty"`

	// contact method
	// Enum: [email]
	ContactMethod string `json:"contact_method,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// customer id
	CustomerID string `json:"customer_id,omitempty"`

	// email address
	EmailAddress string `json:"email_address,omitempty"`

	// name
	Name []string `json:"name"`

	// party actor classification
	PartyActorClassification *PartyActorClassification `json:"party_actor_classification,omitempty"`

	// party actor type
	// Enum: [organisation private]
	PartyActorType string `json:"party_actor_type,omitempty"`

	// post code
	PostCode string `json:"post_code,omitempty"`

	// private identification
	PrivateIdentification *PartyActorPrivateIdentification `json:"private_identification,omitempty"`
}

func PartyActorAttributesWithDefaults(defaults client.Defaults) *PartyActorAttributes {
	return &PartyActorAttributes{

		Address: make([]string, 0),

		City: defaults.GetString("PartyActorAttributes", "city"),

		ContactMethod: defaults.GetString("PartyActorAttributes", "contact_method"),

		Country: defaults.GetString("PartyActorAttributes", "country"),

		CustomerID: defaults.GetString("PartyActorAttributes", "customer_id"),

		EmailAddress: defaults.GetString("PartyActorAttributes", "email_address"),

		Name: make([]string, 0),

		PartyActorClassification: PartyActorClassificationWithDefaults(defaults),

		PartyActorType: defaults.GetString("PartyActorAttributes", "party_actor_type"),

		PostCode: defaults.GetString("PartyActorAttributes", "post_code"),

		PrivateIdentification: PartyActorPrivateIdentificationWithDefaults(defaults),
	}
}

func (m *PartyActorAttributes) WithAddress(address []string) *PartyActorAttributes {

	m.Address = address

	return m
}

func (m *PartyActorAttributes) WithCity(city string) *PartyActorAttributes {

	m.City = city

	return m
}

func (m *PartyActorAttributes) WithContactMethod(contactMethod string) *PartyActorAttributes {

	m.ContactMethod = contactMethod

	return m
}

func (m *PartyActorAttributes) WithCountry(country string) *PartyActorAttributes {

	m.Country = country

	return m
}

func (m *PartyActorAttributes) WithCustomerID(customerID string) *PartyActorAttributes {

	m.CustomerID = customerID

	return m
}

func (m *PartyActorAttributes) WithEmailAddress(emailAddress string) *PartyActorAttributes {

	m.EmailAddress = emailAddress

	return m
}

func (m *PartyActorAttributes) WithName(name []string) *PartyActorAttributes {

	m.Name = name

	return m
}

func (m *PartyActorAttributes) WithPartyActorClassification(partyActorClassification PartyActorClassification) *PartyActorAttributes {

	m.PartyActorClassification = &partyActorClassification

	return m
}

func (m *PartyActorAttributes) WithoutPartyActorClassification() *PartyActorAttributes {
	m.PartyActorClassification = nil
	return m
}

func (m *PartyActorAttributes) WithPartyActorType(partyActorType string) *PartyActorAttributes {

	m.PartyActorType = partyActorType

	return m
}

func (m *PartyActorAttributes) WithPostCode(postCode string) *PartyActorAttributes {

	m.PostCode = postCode

	return m
}

func (m *PartyActorAttributes) WithPrivateIdentification(privateIdentification PartyActorPrivateIdentification) *PartyActorAttributes {

	m.PrivateIdentification = &privateIdentification

	return m
}

func (m *PartyActorAttributes) WithoutPrivateIdentification() *PartyActorAttributes {
	m.PrivateIdentification = nil
	return m
}

// Validate validates this party actor attributes
func (m *PartyActorAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartyActorClassification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartyActorType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var partyActorAttributesTypeContactMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["email"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		partyActorAttributesTypeContactMethodPropEnum = append(partyActorAttributesTypeContactMethodPropEnum, v)
	}
}

const (

	// PartyActorAttributesContactMethodEmail captures enum value "email"
	PartyActorAttributesContactMethodEmail string = "email"
)

// prop value enum
func (m *PartyActorAttributes) validateContactMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, partyActorAttributesTypeContactMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PartyActorAttributes) validateContactMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.ContactMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateContactMethodEnum("contact_method", "body", m.ContactMethod); err != nil {
		return err
	}

	return nil
}

func (m *PartyActorAttributes) validatePartyActorClassification(formats strfmt.Registry) error {

	if swag.IsZero(m.PartyActorClassification) { // not required
		return nil
	}

	if m.PartyActorClassification != nil {
		if err := m.PartyActorClassification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("party_actor_classification")
			}
			return err
		}
	}

	return nil
}

var partyActorAttributesTypePartyActorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["organisation","private"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		partyActorAttributesTypePartyActorTypePropEnum = append(partyActorAttributesTypePartyActorTypePropEnum, v)
	}
}

const (

	// PartyActorAttributesPartyActorTypeOrganisation captures enum value "organisation"
	PartyActorAttributesPartyActorTypeOrganisation string = "organisation"

	// PartyActorAttributesPartyActorTypePrivate captures enum value "private"
	PartyActorAttributesPartyActorTypePrivate string = "private"
)

// prop value enum
func (m *PartyActorAttributes) validatePartyActorTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, partyActorAttributesTypePartyActorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PartyActorAttributes) validatePartyActorType(formats strfmt.Registry) error {

	if swag.IsZero(m.PartyActorType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePartyActorTypeEnum("party_actor_type", "body", m.PartyActorType); err != nil {
		return err
	}

	return nil
}

func (m *PartyActorAttributes) validatePrivateIdentification(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivateIdentification) { // not required
		return nil
	}

	if m.PrivateIdentification != nil {
		if err := m.PrivateIdentification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("private_identification")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PartyActorAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartyActorAttributes) UnmarshalBinary(b []byte) error {
	var res PartyActorAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *PartyActorAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
