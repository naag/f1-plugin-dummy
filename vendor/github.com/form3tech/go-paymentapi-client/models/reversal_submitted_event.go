// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ReversalSubmittedEvent reversal submitted event
// swagger:model ReversalSubmittedEvent
type ReversalSubmittedEvent struct {

	// payment
	Payment *Payment `json:"payment,omitempty"`

	// reversal
	Reversal *ReversalPayment `json:"reversal,omitempty"`

	// reversal submission
	ReversalSubmission *ReversalSubmission `json:"reversal_submission,omitempty"`
}

// Validate validates this reversal submitted event
func (m *ReversalSubmittedEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReversal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReversalSubmission(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReversalSubmittedEvent) validatePayment(formats strfmt.Registry) error {

	if swag.IsZero(m.Payment) { // not required
		return nil
	}

	if m.Payment != nil {
		if err := m.Payment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment")
			}
			return err
		}
	}

	return nil
}

func (m *ReversalSubmittedEvent) validateReversal(formats strfmt.Registry) error {

	if swag.IsZero(m.Reversal) { // not required
		return nil
	}

	if m.Reversal != nil {
		if err := m.Reversal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reversal")
			}
			return err
		}
	}

	return nil
}

func (m *ReversalSubmittedEvent) validateReversalSubmission(formats strfmt.Registry) error {

	if swag.IsZero(m.ReversalSubmission) { // not required
		return nil
	}

	if m.ReversalSubmission != nil {
		if err := m.ReversalSubmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reversal_submission")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReversalSubmittedEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReversalSubmittedEvent) UnmarshalBinary(b []byte) error {
	var res ReversalSubmittedEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
