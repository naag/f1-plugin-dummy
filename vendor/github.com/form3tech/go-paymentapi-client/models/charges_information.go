// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ChargesInformation charges information
// swagger:model ChargesInformation
type ChargesInformation struct {

	// Specifies which party/parties will bear the charges associated with the processing of the payment transaction. Can be one of the following: `DEBT`, `CRED`, `SHAR` or `SLEV`
	BearerCode string `json:"bearer_code,omitempty"`

	// Transaction charges due to the receiver of the transaction. Requires 1 to 2 decimal places. Must be > 0.
	ReceiverChargesAmount string `json:"receiver_charges_amount,omitempty"`

	// Currency of `receiver_charges_amount`. Currency code as defined in [ISO 4217](http://www.iso.org/iso/home/standards/currency_codes.htm).
	ReceiverChargesCurrency string `json:"receiver_charges_currency,omitempty"`

	// sender charges
	SenderCharges []*ChargesInformationSenderChargesItems0 `json:"sender_charges,omitempty"`
}

// Validate validates this charges information
func (m *ChargesInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSenderCharges(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChargesInformation) validateSenderCharges(formats strfmt.Registry) error {

	if swag.IsZero(m.SenderCharges) { // not required
		return nil
	}

	for i := 0; i < len(m.SenderCharges); i++ {
		if swag.IsZero(m.SenderCharges[i]) { // not required
			continue
		}

		if m.SenderCharges[i] != nil {
			if err := m.SenderCharges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sender_charges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChargesInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChargesInformation) UnmarshalBinary(b []byte) error {
	var res ChargesInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ChargesInformationSenderChargesItems0 List of transaction charges due to the sender of the transaction
// swagger:model ChargesInformationSenderChargesItems0
type ChargesInformationSenderChargesItems0 struct {

	// Amount of each transaction charge due to the sender of the transaction. Requires 1 to 2 decimal places. Must be > 0.
	Amount string `json:"amount,omitempty"`

	// Currency of `amount`. Currency code as defined in [ISO 4217](http://www.iso.org/iso/home/standards/currency_codes.htm).
	Currency string `json:"currency,omitempty"`
}

// Validate validates this charges information sender charges items0
func (m *ChargesInformationSenderChargesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ChargesInformationSenderChargesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChargesInformationSenderChargesItems0) UnmarshalBinary(b []byte) error {
	var res ChargesInformationSenderChargesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
