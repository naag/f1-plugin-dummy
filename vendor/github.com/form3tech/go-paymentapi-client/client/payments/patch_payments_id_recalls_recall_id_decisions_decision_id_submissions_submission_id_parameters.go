// Code generated by go-swagger; DO NOT EDIT.

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/form3tech/go-paymentapi-client/models"
)

// NewPatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams creates a new PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams object
// with the default values initialized.
func NewPatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams() *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams {
	var ()
	return &PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParamsWithTimeout creates a new PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParamsWithTimeout(timeout time.Duration) *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams {
	var ()
	return &PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams{

		timeout: timeout,
	}
}

// NewPatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParamsWithContext creates a new PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParamsWithContext(ctx context.Context) *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams {
	var ()
	return &PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams{

		Context: ctx,
	}
}

// NewPatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParamsWithHTTPClient creates a new PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParamsWithHTTPClient(client *http.Client) *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams {
	var ()
	return &PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams{
		HTTPClient: client,
	}
}

/*PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams contains all the parameters to send to the API endpoint
for the patch payments ID recalls recall ID decisions decision ID submissions submission ID operation typically these are written to a http.Request
*/
type PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams struct {

	/*RecallDecisionSubmissionUpdateRequest*/
	RecallDecisionSubmissionUpdateRequest *models.RecallDecisionSubmissionAmendment
	/*XForm3TransactionTime*/
	XForm3TransactionTime *string
	/*XForm3CorrelationID*/
	XForm3CorrelationID *string
	/*DecisionID
	  Decision Id

	*/
	DecisionID strfmt.UUID
	/*ID
	  Payment Id

	*/
	ID strfmt.UUID
	/*RecallID
	  Recall Id

	*/
	RecallID strfmt.UUID
	/*SubmissionID
	  Submission Id

	*/
	SubmissionID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) WithTimeout(timeout time.Duration) *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) WithContext(ctx context.Context) *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) WithHTTPClient(client *http.Client) *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRecallDecisionSubmissionUpdateRequest adds the recallDecisionSubmissionUpdateRequest to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) WithRecallDecisionSubmissionUpdateRequest(recallDecisionSubmissionUpdateRequest *models.RecallDecisionSubmissionAmendment) *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams {
	o.SetRecallDecisionSubmissionUpdateRequest(recallDecisionSubmissionUpdateRequest)
	return o
}

// SetRecallDecisionSubmissionUpdateRequest adds the recallDecisionSubmissionUpdateRequest to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) SetRecallDecisionSubmissionUpdateRequest(recallDecisionSubmissionUpdateRequest *models.RecallDecisionSubmissionAmendment) {
	o.RecallDecisionSubmissionUpdateRequest = recallDecisionSubmissionUpdateRequest
}

// WithXForm3TransactionTime adds the xForm3TransactionTime to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) WithXForm3TransactionTime(xForm3TransactionTime *string) *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams {
	o.SetXForm3TransactionTime(xForm3TransactionTime)
	return o
}

// SetXForm3TransactionTime adds the xForm3TransactionTime to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) SetXForm3TransactionTime(xForm3TransactionTime *string) {
	o.XForm3TransactionTime = xForm3TransactionTime
}

// WithXForm3CorrelationID adds the xForm3CorrelationID to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) WithXForm3CorrelationID(xForm3CorrelationID *string) *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams {
	o.SetXForm3CorrelationID(xForm3CorrelationID)
	return o
}

// SetXForm3CorrelationID adds the xForm3CorrelationId to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) SetXForm3CorrelationID(xForm3CorrelationID *string) {
	o.XForm3CorrelationID = xForm3CorrelationID
}

// WithDecisionID adds the decisionID to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) WithDecisionID(decisionID strfmt.UUID) *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams {
	o.SetDecisionID(decisionID)
	return o
}

// SetDecisionID adds the decisionId to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) SetDecisionID(decisionID strfmt.UUID) {
	o.DecisionID = decisionID
}

// WithID adds the id to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) WithID(id strfmt.UUID) *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) SetID(id strfmt.UUID) {
	o.ID = id
}

// WithRecallID adds the recallID to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) WithRecallID(recallID strfmt.UUID) *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams {
	o.SetRecallID(recallID)
	return o
}

// SetRecallID adds the recallId to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) SetRecallID(recallID strfmt.UUID) {
	o.RecallID = recallID
}

// WithSubmissionID adds the submissionID to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) WithSubmissionID(submissionID strfmt.UUID) *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams {
	o.SetSubmissionID(submissionID)
	return o
}

// SetSubmissionID adds the submissionId to the patch payments ID recalls recall ID decisions decision ID submissions submission ID params
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) SetSubmissionID(submissionID strfmt.UUID) {
	o.SubmissionID = submissionID
}

// WriteToRequest writes these params to a swagger request
func (o *PatchPaymentsIDRecallsRecallIDDecisionsDecisionIDSubmissionsSubmissionIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.RecallDecisionSubmissionUpdateRequest != nil {
		if err := r.SetBodyParam(o.RecallDecisionSubmissionUpdateRequest); err != nil {
			return err
		}
	}

	if o.XForm3TransactionTime != nil {

		// header param X-Form3-Transaction-Time
		if err := r.SetHeaderParam("X-Form3-Transaction-Time", *o.XForm3TransactionTime); err != nil {
			return err
		}

	}

	if o.XForm3CorrelationID != nil {

		// header param X-Form3-correlation-id
		if err := r.SetHeaderParam("X-Form3-correlation-id", *o.XForm3CorrelationID); err != nil {
			return err
		}

	}

	// path param decisionId
	if err := r.SetPathParam("decisionId", o.DecisionID.String()); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	// path param recallId
	if err := r.SetPathParam("recallId", o.RecallID.String()); err != nil {
		return err
	}

	// path param submissionId
	if err := r.SetPathParam("submissionId", o.SubmissionID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
