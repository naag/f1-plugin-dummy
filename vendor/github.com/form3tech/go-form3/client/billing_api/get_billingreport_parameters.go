// Code generated by go-swagger; DO NOT EDIT.

package billing_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetBillingreportParams creates a new GetBillingreportParams object
// with the default values initialized.
func NewGetBillingreportParams() *GetBillingreportParams {
	var ()
	return &GetBillingreportParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetBillingreportParamsWithTimeout creates a new GetBillingreportParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetBillingreportParamsWithTimeout(timeout time.Duration) *GetBillingreportParams {
	var ()
	return &GetBillingreportParams{

		timeout: timeout,
	}
}

// NewGetBillingreportParamsWithContext creates a new GetBillingreportParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetBillingreportParamsWithContext(ctx context.Context) *GetBillingreportParams {
	var ()
	return &GetBillingreportParams{

		Context: ctx,
	}
}

// NewGetBillingreportParamsWithHTTPClient creates a new GetBillingreportParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetBillingreportParamsWithHTTPClient(client *http.Client) *GetBillingreportParams {
	var ()
	return &GetBillingreportParams{
		HTTPClient: client,
	}
}

/*GetBillingreportParams contains all the parameters to send to the API endpoint
for the get billingreport operation typically these are written to a http.Request
*/
type GetBillingreportParams struct {

	/*From
	  Date from which the report should be generated (inclusive). If set, to must be set.

	*/
	From *strfmt.Date
	/*To
	  Date to which the report should be generated (inclusive). If set, from must be set.

	*/
	To *strfmt.Date

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get billingreport params
func (o *GetBillingreportParams) WithTimeout(timeout time.Duration) *GetBillingreportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get billingreport params
func (o *GetBillingreportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get billingreport params
func (o *GetBillingreportParams) WithContext(ctx context.Context) *GetBillingreportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get billingreport params
func (o *GetBillingreportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get billingreport params
func (o *GetBillingreportParams) WithHTTPClient(client *http.Client) *GetBillingreportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get billingreport params
func (o *GetBillingreportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFrom adds the from to the get billingreport params
func (o *GetBillingreportParams) WithFrom(from *strfmt.Date) *GetBillingreportParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get billingreport params
func (o *GetBillingreportParams) SetFrom(from *strfmt.Date) {
	o.From = from
}

// WithTo adds the to to the get billingreport params
func (o *GetBillingreportParams) WithTo(to *strfmt.Date) *GetBillingreportParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get billingreport params
func (o *GetBillingreportParams) SetTo(to *strfmt.Date) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *GetBillingreportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.From != nil {

		// query param from
		var qrFrom strfmt.Date
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom.String()
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.To != nil {

		// query param to
		var qrTo strfmt.Date
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo.String()
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
