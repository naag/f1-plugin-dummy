// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CurveType curve type
//
// swagger:model CurveType
type CurveType string

const (

	// CurveTypePRIME256V1 captures enum value "PRIME256V1"
	CurveTypePRIME256V1 CurveType = "PRIME256V1"

	// CurveTypeSECP256R1 captures enum value "SECP256R1"
	CurveTypeSECP256R1 CurveType = "SECP256R1"

	// CurveTypeSECP384R1 captures enum value "SECP384R1"
	CurveTypeSECP384R1 CurveType = "SECP384R1"

	// CurveTypeSECP256K1 captures enum value "SECP256K1"
	CurveTypeSECP256K1 CurveType = "SECP256K1"
)

// for schema
var curveTypeEnum []interface{}

func init() {
	var res []CurveType
	if err := json.Unmarshal([]byte(`["PRIME256V1","SECP256R1","SECP384R1","SECP256K1"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		curveTypeEnum = append(curveTypeEnum, v)
	}
}

func (m CurveType) validateCurveTypeEnum(path, location string, value CurveType) error {
	if err := validate.EnumCase(path, location, value, curveTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this curve type
func (m CurveType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCurveTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
