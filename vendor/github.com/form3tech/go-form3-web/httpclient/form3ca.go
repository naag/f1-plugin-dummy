package httpclient

import (
	"crypto/tls"
	"crypto/x509"
	"errors"
)

func trustForm3() (*tls.Config, error) {
	const form3Root = `
-----BEGIN CERTIFICATE-----
MIIGXDCCBESgAwIBAgICEAEwDQYJKoZIhvcNAQELBQAwgbgxCzAJBgNVBAYTAkdC
MRAwDgYDVQQIDAdFbmdsYW5kMScwJQYDVQQKDB5CYWNrIE9mZmljZSBUZWNobm9s
b2d5IExpbWl0ZWQxPTA7BgNVBAsMNEJhY2sgT2ZmaWNlIFRlY2hub2xvZ3kgTGlt
aXRlZCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkxLzAtBgNVBAMMJkJhY2sgT2ZmaWNl
IFRlY2hub2xvZ3kgTGltaXRlZCBSb290IENBMB4XDTE3MDEwOTExMzUxMFoXDTI3
MDEwNzExMzUxMFowgcAxCzAJBgNVBAYTAkdCMRAwDgYDVQQIDAdFbmdsYW5kMScw
JQYDVQQKDB5CYWNrIE9mZmljZSBUZWNobm9sb2d5IExpbWl0ZWQxPTA7BgNVBAsM
NEJhY2sgT2ZmaWNlIFRlY2hub2xvZ3kgTGltaXRlZCBDZXJ0aWZpY2F0ZSBBdXRo
b3JpdHkxNzA1BgNVBAMMLkJhY2sgT2ZmaWNlIFRlY2hub2xvZ3kgTGltaXRlZCBJ
bnRlcm1lZGlhdGUgQ0EwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCr
APkeNqzhlj2G0MoY7eTpqnGKrvYl9DYNQZ3ZqRSC1Qu/M11K5JLIDMz3JAcNrmsJ
Tdx/ZLs9B8/kBwDGj8KS+Z0bh7qXG0ypjyrtBiS2MYCH01r8GXcqHwNe+qdALLTY
RWNtfNV4hP8UHUIRKfn9+C3Hm903fcr1xmOzaIg8h1U931U9f6NIPesEJh494eLg
19aaSpj6KFh2pQsL5yD3zPXCtyAH1J7bWfseUuVJ353MPOyYnsUuLWo4S77tNwnc
U31VRTySMxcI/h8FD1/NzD8etjimmAAoqFx7qzX55lRAVDU1qekUBLx6xy+Lrn8T
hAdow0fe4B8jNp4hdi/o66xM4Qat4SU1fUV1s/CCnn7RHx7KBrSrurFBDJnuU3q+
WDe/gXgPhLA50CNK5UEEXjc7H/kuVkdtqlPmWQBUkBBEfQBV1uz67yTGXG+lKaEv
foj8xD5MzU6nAs6NqZCiJDi5rjzlthvz+JXIo5DDrzs1MKh2XR66nEVbQFLw8VNC
6wAuUmhQ1jkbVq69hrs1ySlXarbDpqrMcePdkNzPOByl1aa4Kqg3/T5JZhjX2qfw
xqFkQT60edso1ujyh5RAWvIdVK4HzXc5Nnr/5QeJ4bbU6OnWrxn+Mmt0PH8rjinm
6pLOfQEOmh634ZNLrasLkqIX4MqFhKJqEAofF4rZ+wIDAQABo2YwZDAdBgNVHQ4E
FgQUtWj+t37uAqZosl0jysv5fE/K5s8wHwYDVR0jBBgwFoAUzbTXbJTXODmueOmL
wVstgo/JT/YwEgYDVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYwDQYJ
KoZIhvcNAQELBQADggIBAC7DNP7bwe2EJwMwth5bwgyTtBRLuc0PLgQCQu1Y5UYv
WwDHPH8AU2yqLzjxzuaMwx0TiiNn25g8lrWsPhwjwoE3HQ/G5tIJOl3XBUV8SE/h
LjI74L8S1N3Y94KQ5BXhDmTKBR9JKdrKWDdpyaVNkG8BpW8gU0iRrTF/qzNcHeK3
XXb923WH9dCZ2xt/RhlOSBGyL3p/wXnHp7AhRcoGaTpJMVCbATbSUWgJhVLrMg4B
6Lz/nu84XA0NoWtYvXpTj5wO0Ov1x3xbLnTso2dV/i7C0f0lcv4hdnwKpy6qi+/7
Nw/O8DI8397L0RWt/rb0cb1XcQuP3Tayg2xGFtjXNFK+gzqTQ/hWyd///Dq4iMWV
c/Zk8BGT+MRPCO5xGkA+SIlCMz61tfxtHI71VbfkB95gpDkrGUVjJqsdyY+a2s2z
t9ZE9xSYhqlFbe+vV1aL2JtmZbE0d+I3nO4vgzVWr7N1q6Z3Wlfrkq9f2DbwFAbL
fdWIxjBFvOma2eaU20Q6F8SEon6iMl5GUWuKpHne9ccVLBU1JicUimiGhOUDzn7v
sLn5FJfF2Rxw7zEbR3n3fStlsEDJunc7y7PRxdhgDiGhlG40MFRUGkClwrvirOjO
9KGxy/bK9/pe3tHjShAtm1eDVAkRbRdlEUtR/RBBfKgaHfJSeYYdB6oc8RswFPo1
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIGWDCCBECgAwIBAgIJANwk4aGdF9ruMA0GCSqGSIb3DQEBCwUAMIG4MQswCQYD
VQQGEwJHQjEQMA4GA1UECAwHRW5nbGFuZDEnMCUGA1UECgweQmFjayBPZmZpY2Ug
VGVjaG5vbG9neSBMaW1pdGVkMT0wOwYDVQQLDDRCYWNrIE9mZmljZSBUZWNobm9s
b2d5IExpbWl0ZWQgQ2VydGlmaWNhdGUgQXV0aG9yaXR5MS8wLQYDVQQDDCZCYWNr
IE9mZmljZSBUZWNobm9sb2d5IExpbWl0ZWQgUm9vdCBDQTAeFw0xNzAxMDkxMTIw
MzdaFw0zNzAxMDQxMTIwMzdaMIG4MQswCQYDVQQGEwJHQjEQMA4GA1UECAwHRW5n
bGFuZDEnMCUGA1UECgweQmFjayBPZmZpY2UgVGVjaG5vbG9neSBMaW1pdGVkMT0w
OwYDVQQLDDRCYWNrIE9mZmljZSBUZWNobm9sb2d5IExpbWl0ZWQgQ2VydGlmaWNh
dGUgQXV0aG9yaXR5MS8wLQYDVQQDDCZCYWNrIE9mZmljZSBUZWNobm9sb2d5IExp
bWl0ZWQgUm9vdCBDQTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3w
HK/COt6h1Y+fn1lHiISp/bor3M6nSGWFviFFQ40I+aKjti0d47h9PYLrdpc7mdhz
35Vo62mh5T683a7+NvLy1cWLudJtWSuJzJrnRmk8IFPqzg/f+kPxb2UEGh3N0k8X
JlR7ttLhKYMAMiJclcZb6N+MS7rg4BGPbeNZohesoGbL51pz0HdCCf88aBMlwDyf
UhPsDa+CQioQKikknLYUhLVwuIRqNsBx2iuNbpU9KYsPtNH/ywHQ9GR47sSEMnSf
0pPhTzZ37H7UOyoJ90JEouNDIFntq597mqoMKB+bP/jaf/H1aNQjN6HRqObK870i
+Mc33JgfvOKV+6qjo6nERdVfWH0z9D7WpaUHsv6KPuuTPq9vJvTqaDwoREEGtjoZ
R+IQ4saaTOQi/MXpZtZWSmAAW7ZvdSAEzxKVRLSeAcNvtPWmZnTp5gYIs1MrJVUz
uxu1l/9leSgN8VifvBe7LdH6CamYxIfUPiQx6qLks8npHadPI4/bcycmeWRB0n21
SCQFh3CloPGkFVN4sj4qp0d3Pkpi2wepjZn4w5q7GHvVIlTz6QHazms4QMqLV46w
Fe3kE0UoAJTyqJTW4pLrz3QaJ6tl3YUaV+EIF1R5/BY+lX3JFYJ9zbuGOC0F04MX
hLNVIwOJIV12ShdfA3/X1oIJPa8GRS7mmOE0kIiHAgMBAAGjYzBhMB0GA1UdDgQW
BBTNtNdslNc4Oa546YvBWy2Cj8lP9jAfBgNVHSMEGDAWgBTNtNdslNc4Oa546YvB
Wy2Cj8lP9jAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG
9w0BAQsFAAOCAgEAesYW77l/PONNMAf1m18p0Vfde8Q7Ku1KRXXBQSUrr6voJxyC
dKDKNyAobPIJxVwCWpiAzoculeke0WbSXqGRrgz/6OHvf866GFBRJoUVrMnHHVGE
Vh/6aVVs3mZqTkBdNsP6PDu7aT1gZm3N/3eHL/MuiWOy08O5CiF9lfkTQ2uV2d6I
BvZnZcVzi3rDlGbXDq8ggTkheABn93kKbihJIpzKCvMyQy+FAuO3QCA0GYgYNNUk
WgI8Ao9Sx1aO5tMhMxrDg900AWA7y+gib1jsTESl/USXu1GCfMtEZPBDqKjuq7Qa
nqwd2Ppq+Tc09i4Qdk9oQdVZeYUVOqrp8OkgTmRLL7lSmCMiTdEGCaDFfmJyfZ2o
w6FDx1/3Q9vqoKubERbneFMlfYpRel3E67o0NKw4rghu6FOgPCdK1Hnm6vT8IRXX
19WN49S9hu6ThW5alxQla3GkXIQ3upQAry8ZkmAPDeBet0k8tojaZuUiCKCf+YKR
j91cm0DJgNkRYSnHBCUGIPT34in4U8U5wt2/GS1waL0RJ3TzOBxmZloWDhEXKoV9
tpWHOdGh7ygPLlEL3ok01O2nONaq7mrOL3jlrQgKmjI4371X9XnmxbjDKjgwRmLS
nLDXrfbruXnYQfZAWMauTgCNUxNk7DvqyDHiZ1iZkr9c2wwQXbz8dsv1+9w=
-----END CERTIFICATE-----`

	rootCAs := x509.NewCertPool()
	ok := rootCAs.AppendCertsFromPEM([]byte(form3Root))
	if !ok {
		return nil, errors.New("failed to parse root certificate")
	}

	return &tls.Config{
		RootCAs: rootCAs,
	}, nil
}
